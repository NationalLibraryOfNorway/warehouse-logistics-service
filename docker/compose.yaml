# Define what services to set up for local development
services:
    # Set up a local mongo instance for local development
  mongo-db:
    image: mongo:4.4.22 # Same as the version in the prod env
    hostname: mongo-db
    restart: unless-stopped
    entrypoint: >
      /bin/bash -c '
      openssl rand -base64 756 > /data/keyfile.key &&
      chmod 400 /data/keyfile.key &&
      chown mongodb:mongodb /data/keyfile.key &&
      /usr/local/bin/docker-entrypoint.sh mongod --replSet rs0 --keyFile /data/keyfile.key --bind_ip_all --port 27017'
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: wls
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: toor
    volumes:
      - ./mongo/mongo-init.js:/mongo-init.js:ro
      - mongodata:/data/db
      - mongoconfig:/data/configdb
      - mongoshared:/data

  # Set up a mongo-express instance to view the mongo database
  # Makes GUI available at: http://localhost:8081
  mongo-express:
    image: mongo-express:1.0.2
    restart: unless-stopped
    ports:
      - "8081:8081"
    depends_on:
      - mongo-db
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://root:toor@mongo-db:27017/?replicaSet=rs0
      ME_CONFIG_OPTIONS_EDITORTHEME: gruvbox-dark
      ME_CONFIG_BASICAUTH: false

  # Set up a local keycloak instance for local development
  # Keycloak is configured to automatically import a test realm with service accounts
  # Makes GUI available at: http://localhost:8082
  #
  # When making changes to the realm, export the realm and save it in the keycloak/import folder
  # docker exec -it wls-local-keycloak-1 /opt/keycloak/bin/kc.sh export --file "/tmp/mlt-local-realm-export.json" --users "same_file" --realm "mlt-local"
  # docker cp wls-local-keycloak-1:/tmp/mlt-local-realm-export.json ./docker/keycloak/import/mlt-local-realm-export.json
  # git add docker/keycloak/import/mlt-local-realm-export.json
  # This connects interactively to the container, uses keycloak export command to export the realm, copies the file to the local machine, and adds it to git
  #
  # Also, since I am a lazy boi: axiell -> E93MF2F8UfpRrCowAbVMStvsTzy0gmgr
  keycloak:
    image: quay.io/keycloak/keycloak:24.0.1 # Same as the version in prod env
    restart: always
    hostname: keycloak
    environment:
      KEYCLOAK_ADMIN: root
      KEYCLOAK_ADMIN_PASSWORD: toor
    ports:
      - "8082:8080"
    command: start-dev --import-realm # Automatically import realm on startup with necessary clients
    volumes:
      - ./keycloak/import:/opt/keycloak/data/import

  # Set up Kafka for local development
  # Kafka is used to send history/statistic messages from Hermes to ElasticSearch
  # To view available topics, you can use "Kafka" plugin for IntelliJ and connect it to 127.0.0.1:9092
  #
  # This version of Kafka (4.0.0) does not require Zookeper, using KRaft instead
  # The service is configured to use the new features as far as I am aware
  # For some reason "KAFKA_CREATE_TOPICS" environment variable does not work, hence the need for "kafka-topic-setup"
  kafka:
    image: "bitnami/kafka:4.0.0"
    restart: always
    hostname: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_CLUSTER_ID: 1
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true

  # Easy service that waits for Kafka to start and creates a "hermes-mythos" topic
  kafka-topic-setup:
    image: 'bitnami/kafka:4.0.0'
    depends_on:
      - kafka
    entrypoint: [ ]
    command: >
      bash -c '
      echo "Waiting for Kafka to be ready..." &&
      sleep 30 &&
      kafka-topics.sh --create --if-not-exists \
        --bootstrap-server kafka:9092 \
        --topic hermes-mythos \
        --partitions 1 \
        --replication-factor 1
      '

  jaeger:
    image: jaegertracing/jaeger:latest
    ports:
      - "4318:4318"
      - "16686:16686"
      - "13133:13133"

  # Mockoon allows for easy setup of a mock server for receiving POST calls
  # In our case it is used for locally testing the callback functionality
  mockoon:
    image: mockoon/cli:9.2.0
    restart: always
    hostname: mockoon
    ports:
      - "80:8282"
    command: --data /data/wls-callbacks.json --port 8282 --log-transaction
    volumes:
      - ./mockoon/wls-callbacks.json:/data/wls-callbacks.json

  # Also use Mockoon for testing the SynQ Controller
  mockoon-synq:
    image: mockoon/cli:9.2.0
    restart: always
    hostname: mockoon
    ports:
      - "8181:8181"
    command: --data /data/wls-synq.json --port 8181 --log-transaction
    volumes:
      - ./mockoon/wls-synq.json:/data/wls-synq.json

volumes:
  mongodata:
  mongoconfig:
  mongoshared:
